_G.Version = 1
getgenv().Config = {
	Accounts = {
		{ ID = 4017352872, script = 1 },
		{ ID = 2, script = 2 },
		{ ID = 3, script = 1 },
		{ ID = 4, script = 2 },
		{ ID = 5, script = 2 }
	},
	Scripts = { 
		-- Please make it a raw link 
		["Script 1"] = "https://raw.githubusercontent.com/Pauleeeee1/hi/main/Auto%20Farm%20Badft",
		["Script 2"] = "https://raw.githubusercontent.com/Pauleeeee1/hi/main/test",
		["Script 3"] = "Raw Link",
		["Script 4"] = "Raw Link",
	}
}

_G.DebugPrint = true



if not _G.Version or _G.Version == "1" then
	local Players = game:GetService("Players")
	local LocalPlayer = Players.LocalPlayer
	local UserID = LocalPlayer.UserId

	local function debugprint(text, ...)
		if _G.DebugPrint then
			local args = { ... }
			if #args > 0 then
				text = text .. " " .. table.concat(args, " ")
			end
			print("Debug: " .. text)
		end
	end

	local function isUserInAccounts(userId)
		for _, account in ipairs(getgenv().Config.Accounts) do
			if account.ID == userId then
				-- Wenn die ID gefunden wird, führe zusätzliche Checks durch
				-- Beispiel: Überprüfe, ob das Skript existiert
				local scriptKey = "Script " .. account.script
				local scriptUrl = getgenv().Config.Scripts[scriptKey]

				if scriptUrl then
					-- ID und Skript wurden gefunden
					return true
				else
					-- ID gefunden, aber kein Skript zugewiesen
					debugprint("Script URL not found for script ID:", account.script)
					return false
				end
			end
		end
		return false
	end


	local function getUserScripts(userId)
		local userScripts = {}
		for _, account in ipairs(getgenv().Config.Accounts) do
			if account.ID == userId then
				local scriptKey = "Script " .. account.script
				local scriptUrl = getgenv().Config.Scripts[scriptKey]
				if scriptUrl then
					table.insert(userScripts, scriptUrl)
				else
					debugprint("Script URL not found for key:", scriptKey)
				end
			end
		end
		return userScripts
	end

	local function ExecuteRawlink(scriptUrl)
		local success, response = pcall(function()
			return syn.request({
				Url = scriptUrl,
				Method = "GET"
			})
		end)

		if success and response.StatusCode == 200 then
			local scriptContent = response.Body
			local func, err = loadstring(scriptContent)
			if func then
				pcall(func)
			else
				debugprint("Failed to load script. Error:", err)
			end
		else
			debugprint("Failed to fetch script. Status code:", response and response.StatusCode or "unknown", "Error:", response and response.StatusText or "unknown")
		end
	end

	local function getScripts()
		local scripts = {}
		for scriptName, scriptUrl in pairs(getgenv().Config.Scripts) do
			table.insert(scripts, { name = scriptName, url = scriptUrl })
		end
		return scripts
	end

	if isUserInAccounts(UserID) then
		local userScripts = getUserScripts(UserID)
		if #userScripts > 0 then
			for _, scriptUrl in ipairs(userScripts) do
				debugprint("User Script URL:", scriptUrl)
				ExecuteRawlink(scriptUrl)
			end
		else
			debugprint("No scripts found for this user.")
		end
	else
		debugprint("User not in accounts list.")
	end

	-- Example of using getScripts function
	local allScripts = getScripts()
	for _, script in ipairs(allScripts) do
		debugprint("Script Name:", script.name, "URL:", script.url)
	end
elseif _G.Version == "2" then
	_G.DebugPrint = true

	local Players = game:GetService("Players")
	local LocalPlayer = Players.LocalPlayer
	local UserID = LocalPlayer.UserId

	local function debugprint(text, ...)
		if _G.DebugPrint then
			local args = { ... }
			if #args > 0 then
				text = text .. " " .. table.concat(args, " ")
			end
			print("Debug: " .. text)
		end
	end

	local function isUserInAccounts(userId)
		for _, account in ipairs(getgenv().Config.Accounts) do
			if account.ID == userId then
				-- Wenn die ID gefunden wird, führe zusätzliche Checks durch
				-- Beispiel: Überprüfe, ob das Skript existiert
				local scriptKey = "Script " .. account.script
				local scriptUrl = getgenv().Config.Scripts[scriptKey]

				if scriptUrl then
					-- ID und Skript wurden gefunden
					return true
				else
					-- ID gefunden, aber kein Skript zugewiesen
					debugprint("Script URL not found for script ID:", account.script)
					return false
				end
			end
		end
		return false
	end


	local function getUserScripts(userId)
		local userScripts = {}
		for _, account in ipairs(getgenv().Config.Accounts) do
			if account.ID == userId then
				local scriptKey = "Script " .. account.script
				local scriptUrl = getgenv().Config.Scripts[scriptKey]
				if scriptUrl then
					table.insert(userScripts, scriptUrl)
				else
					debugprint("Script URL not found for key:", scriptKey)
				end
			end
		end
		return userScripts
	end
	local function ExecuteRawlink(scriptUrl)
		local success, scriptContent = pcall(function()
			return game:HttpGet(scriptUrl)
		end)

		if success then
			local func, err = loadstring(scriptContent)
			if func then
				local executeSuccess, executeError = pcall(func)
				if not executeSuccess then
					warn("Failed to execute script. Error:", executeError)
				end
			else
				warn("Failed to load script. Error:", err)
			end
		else
			warn("Failed to fetch script. Error:", scriptContent)
		end
	end


	local function getScripts()
		local scripts = {}
		for scriptName, scriptUrl in pairs(getgenv().Config.Scripts) do
			table.insert(scripts, { name = scriptName, url = scriptUrl })
		end
		return scripts
	end

	if isUserInAccounts(UserID) then
		local userScripts = getUserScripts(UserID)
		if #userScripts > 0 then
			for _, scriptUrl in ipairs(userScripts) do
				debugprint("User Script URL:", scriptUrl)
				ExecuteRawlink(scriptUrl)
			end
		else
			debugprint("No scripts found for this user.")
		end
	else
		debugprint("User not in accounts list.")
	end

	-- Example of using getScripts function
	local allScripts = getScripts()
	for _, script in ipairs(allScripts) do
		debugprint("Script Name:", script.name, "URL:", script.url)
	end
end
